using System;
using System.Threading;

namespace STUDIO1_PROJECT
{
    internal class Game
    {
        static Random rand = new Random();

        //Player Location start of game
        static int x = 5;
        static int y = 10;
        static int ground = 10;

        //variables needed for jump
        static bool jump = false;
        static int jumpHeight = 5;
        static int jumpProgress = 0;

        //variables needed for crouch
        static bool crouch = false;
        static bool holdingCrouch = false;
        static int crouchTimer = 0;
        static int crouchDuration = 7;

        static int[] obstacleX = new int[10]; 
        static int[] obstacleY = new int[10];
        static int minSpacing = 10;
        static int maxSpacing = 30;

        static bool gameOver = false;

        static bool rightArrowPressed = false;
        static int obstacleSpeed = 1;

        static void Main()
        {
            Console.CursorVisible = false;
            SpawnObstacles();

            while (!gameOver)
            {
                
                Input();
                Update();
                Draw();
                Thread.Sleep(50);
            }

            Console.Clear();  
            Console.Write("Game over");

            Console.ReadKey();
        }

        static void SpawnObstacles()
        {
            int start = Console.WindowWidth;

            for (int i = 0; i < obstacleX.Length; i++)
            {
                obstacleX[i] = start;
                obstacleY[i] = ground;
                start += rand.Next(minSpacing, maxSpacing);
            }
        }


        static void Input()
        {
            rightArrowPressed = false;



            while (Console.KeyAvailable)
            {
                ConsoleKeyInfo key = Console.ReadKey(true);

                if (key.Key == ConsoleKey.Spacebar && !jump && crouchTimer == 0)
                {
                    jump = true;
                    jumpProgress = jumpHeight;
                }
                else if (key.Key == ConsoleKey.C && !jump)
                {
                    crouchTimer = crouchDuration;
                    crouch = true;
                }
                else if (key.Key == ConsoleKey.RightArrow)
                {
                    obstacleSpeed = 2;
                    
                }

            }


        }

        //update after inputs from player
        static void Update()
        {
          

            if (jump)
            {
                y = ground - jumpProgress;
                jumpProgress--;

                if (y >= ground)
                {
                    y = ground;
                    jump = false;
                }
            }

            // Crouch timer countdown
            if (crouchTimer > 0)
            {
                crouchTimer--;
                crouch = true;
                y = ground + 1;
            }
            else
            {
                crouch = false;
                y = ground;
            }
            

            // Reset y position if not jumping or crouching
            if (!jump && !crouch)
            {
                y = ground;
            }


            

            //OBSTACLE 
            for (int i = 0; i < obstacleX.Length; i++)
            {

               
                obstacleX[i] -= obstacleSpeed;
                //when it leaves the console by scrolling away, it spawns new one
                if (obstacleX[i] < 0)
                {
                   
                    int furthestX = GetFurthestObstacleX();

                    obstacleX[i] = furthestX + rand.Next(minSpacing, maxSpacing);
                    obstacleY[i] = ground;
                }

                // Collision detection
                if (x == obstacleX[i] && y == obstacleY[i])
                {
                    //gameOver = true;
                }
            }

        }

        static int GetFurthestObstacleX()
        {
            int max = 0;
            for (int i = 0; i < obstacleX.Length; i++)
            {
                if (obstacleX[i] > max)
                    max = obstacleX[i];
            }
            return max; //bring value into update method in furthestX
        }
        static void Draw()
        {
            Console.Clear();

            Console.CursorVisible = false;

            Console.SetCursorPosition(x, y);

            
            Console.Write(jump ? "O" : crouch ? "-" : "O");

            //if (jump)
            //{
            //    Console.Write("O");
            //}
            //else if (crouch)
            //{
            //    Console.Write("-"); // Smaller for crouch
            //}
            //else
            //{
            //    Console.Write("O"); // Normal
            //}

            for (int i = 0; i < obstacleX.Length; i++)
            {
                if (obstacleX[i] >= 0 && obstacleX[i] < Console.WindowWidth)
                {
                    Console.SetCursorPosition(obstacleX[i], obstacleY[i]);
                    Console.Write("#");
                }
            }

            // Optional ground line
            Console.SetCursorPosition(0, ground + 2);
            Console.Write(new string('_', Console.WindowWidth));

           
        }

     
    }
}